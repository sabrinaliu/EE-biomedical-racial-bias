{"version":3,"sources":["static/spiro_test.webp","content_components/Spirometer.js","content_components/RaceCorrection.js","content_components/History.js","content_components/Solutions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Spirometer","className","id","Card","CardContent","Typography","variant","component","CardMedia","alt","image","require","title","RaceCorrection","History","React","useState","activeStep","setActiveStep","steps","Stepper","nonLinear","orientation","map","label","index","Step","key","StepButton","onClick","step","StepContent","getStepContent","Solutions","App","pages","ref","offset","speed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9d05bbb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spiro_test.368ed67b.webp\";","import React from 'react';\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core/';\n\nfunction Spirometer() {\n  return (\n    <div className=\"background-style\" id=\"spirometry\">\n      <header>What is spirometry?</header>\n      <Card id=\"spiro-card\">\n        <CardContent id=\"spiro-text\">\n          <Typography variant=\"body1\" component=\"p\">\n              Spirometry is a clinical test used by physicians to assess the respiratory health of a patient by measuring inhalation and exhalation speed and exhalation volume. By comparing these measurements to set standards, doctors can use the results to diagnose a patient with chronic lung conditions, like asthma, COPD, or pulmonary fibrosis, or just use it as a monitoring tool before surgeries or at a check-up to measure lung health.\n          </Typography>\n        </CardContent>\n\n        <CardMedia\n          component=\"img\"\n          alt=\"Spirometer\"\n          image={require(\"../static/spiro_test.webp\")}\n          title=\"Spirometer\"\n        />\n      </Card>\n    </div>\n  );\n}\n\nexport default Spirometer;\n","import React from 'react';\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core/';\n\nfunction RaceCorrection() {\n  return (\n        <div className=\"background-style\" id=\"race-correction\">\n          <header>The Race Correction Factor</header>\n          <Card id=\"spiro-card\">\n            <CardMedia\n              component=\"img\"\n              alt=\"Spirometer\"\n              image={require(\"../static/spiro_test.webp\")}\n              title=\"Spirometer\"\n            />\n            <CardContent id=\"spiro-text\">\n              <Typography variant=\"body1\" component=\"p\">\n              What is considered a standard result for an individual can vary greatly. Digital spirometers will often ask physicians to input information about the patient before the test begins. These involve factors like age, gender, height, weight, and also race.\n              There has not been no identified genetic factor that would suggest inherent differences in lung capacity between races. In addition, it can be imprecise as physicians often just eyeball it instead of directly asking their patients. However, the \"racial correction factor\" leads to very different standards depending on the person. In the U.S., spirometers set the standard for a \"normal\" spirometer result in African Americans to be 10-15% lower than that of Caucasians.\n              RESEARCH AND PUT IMPACTS HERE (asbestos)\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n\n  );\n}\n\nexport default RaceCorrection;\n","import React from 'react';\nimport { Stepper, Step, StepContent, StepButton } from '@material-ui/core/';\nimport { Card, Typography } from '@material-ui/core/';\n\nfunction getSteps() {\n  return ['1840\\'s', '1851', '1897', '1922', '1974'];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return 'Hutchinson invents the modern spirometer. Quickly, he runs into the problem of how to set a standard for the measurements. He notes variations in lung capacity caused by weight and height. However, he ends up focusing on the effects of occupational differences.';\n    case 1:\n      return 'Physician and slave owner Samuel Cartwright documents racial differences using the spirometer. He uses his results to justify slavery, stating that extra physical work is good for health and will strengthen slaves\\' lungs.';\n    case 2:\n      return 'W.E.B. Du Bois, Kelly Miller, and other Black scholars critique studies that argue lung capacity and other physical differences show racial inferiority. Still, they are largely ignored as the large majority of studies confirm racial differences in lung capacity.';\n    case 3:\n      return 'Wilson and Edwards publish the first set of spirometry standards for different races.';\n    case 4:\n      return 'As the spirometer becomes more advanced and computerized, Rossiter and Weill develop the racial “scaling factor” to be programmed directly into the spirometer. Physicians no longer directly see the '\n    default:\n      return 'Something is wrong...'\n  }\n}\n\nexport default function History() {\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleStep = (step: number) => () => {\n    setActiveStep(step);\n  };\n\n  return (\n    <div className=\"background-style\" id=\"race-correction\">\n      <header>The Race Correction Factor</header>\n      <Card id=\"spiro-card\">\n        <Stepper nonLinear activeStep={activeStep} orientation=\"vertical\">\n          {steps.map((label, index) => (\n            <Step key={label}>\n              <StepButton onClick={handleStep(index)}>{label}</StepButton>\n              <StepContent>\n                <Typography>{getStepContent(index)}</Typography>\n              </StepContent>\n            </Step>\n          ))}\n        </Stepper>\n      </Card>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Card, CardContent, CardMedia, Typography } from '@material-ui/core/';\n\nfunction Solutions() {\n  return (\n        <div className=\"background-style\" id=\"race-correction\">\n          <header>Lessons Learned and Moving Forward</header>\n          <Card id=\"spiro-card\">\n            <CardContent id=\"spiro-text\">\n              <Typography variant=\"body1\" component=\"p\">\n              The bias found in spirometers is not unique. There are many other cases of racial biases found in biomedical devices, as well as other medical treatments. However, this device and its history does point towards potential solutions:\n\n                <ul>\n                  <li>\n                  First and foremost, <b>the spirometer is used as a cautionary tale against relying too heavily on race-based medicine</b>. In this particular case, lung capacity can be dramatically affected by ones environment, specifically the air pollution levels where individuals live. In a case that has been played out multiple times in history, race, here, serves as a proxy for socioeconomic gaps and lower air quality in poorer neighborhoods. It reminds us that racial data is important -- it is not possible to address these differences without knowledge about it. However, while we collect racial data, it is important to remember to look for these systemic societal issues instead of accepting it as a genetic source of all problems.\n                  </li>\n\n                  <li>\n                  Along spirometry's history, individuals did ring the alarm that raised suspicion about the racial correction factor, even though their concerns were not addressed. <b>This highlights the need for ensuring meaningful diversity in the engineers and physicians developing biomedical devices</b>. While it is a first step to have members from differing backgrounds present, others need to make sure to respect their voice at the table and their input need to be taken seriously. MENTION PATIENTS INVOLVED IN TRIALS AND DIVERSITY\n                  </li>\n\n                  <li>\n                  MENTION OFTEN NOT PURPOSEFUL For a current physician or engineer who may be faced with the next spirometer, it can be difficult to identify such racial biases, especially when they are presented as longstanding, well-established standards. However, <b>by incorporating classes in ethnic studies and history, among other subjects, in the curriculum of those in the biomedical community </b> can give perspective about the context in which they were designed and encourage critical thinking about such issues.\n                  </li>\n\n                  <li>\n                  For the spirometer and many other devices that have already reached the consumer, it can be difficult to encourage change. The development cycle for biomedical technology is relatively slow due to the large number of approvals they have to receive to ensure that they are safe for the public. Therefore, many researchers allocate significant resources to designing and improving new devices but few focus on the post-release. <b>By having national and government organizations implement and fund a system for vetting and reassessing devices on the market for equity and effectiveness at regular time intervals </b> will help make sure that such biases do not go unchecked. If problems are pinpointed, a deadline needs to be set for the issue to be resolved and products to be redesigned and released. Spending funds on such an initiative will preserve the quality of biomedical devices even as the field continues to adapt and grow.\n\n                  </li>\n\n                </ul>\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n\n  );\n}\n\nexport default Solutions;\n","import React from 'react';\nimport { Parallax, ParallaxLayer } from 'react-spring/renderprops-addons'\nimport Spirometer from './content_components/Spirometer';\nimport RaceCorrection from './content_components/RaceCorrection';\nimport History from './content_components/History';\nimport Solutions from './content_components/Solutions';\nimport './App.css';\n\nfunction App() {\n  let parallax;\n  return (\n    <div className=\"App background-style\">\n    <Parallax pages={6} ref={ref => parallax = ref}>\n      <ParallaxLayer offset={.3} speed={8}>\n        <div id=\"intro\">\n          <header>Racial Bias in Biomedical Devices</header>\n          <p id=\"intro-desc\">Recent news reports often discuss racial biases in medical care, from the interactions between patient and physicians to the machine learning algorithms[1] used to diagnose individuals. These issues have been furthered noticed with the recent pandemic as well as the growing trend as more technology is incorporated into hospitals. Biomedical devices are no exception.\n          In trying to understand how these biases can be built into these devices, the spirometer and the racial correction factor serves as a case study that can show how the problem can be addressed in these devices in general.</p>\n        </div>\n      </ParallaxLayer>\n\n      <ParallaxLayer offset={1.} speed={.5}>\n        <Spirometer />\n      </ParallaxLayer>\n\n      <ParallaxLayer offset={2} speed={0}>\n        <RaceCorrection />\n      </ParallaxLayer>\n\n      <ParallaxLayer offset={3} speed={0}>\n        <div id=\"effects\">\n          <header>Effects</header>\n        </div>\n      </ParallaxLayer>\n\n      <ParallaxLayer offset={4} speed={0}>\n        <History />\n      </ParallaxLayer>\n\n      <ParallaxLayer offset={5} speed={0}>\n        <Solutions />\n      </ParallaxLayer>\n    </Parallax>\n\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}